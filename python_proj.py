# -*- coding: utf-8 -*-
"""python_proj.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Ol3WFs8I74ZxRy2ViDvVzJsNJ1QKJzo3

# Student_Mat Dataset

### import necessary libraries
"""

# main libraries
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# secondary libraries for further analysis
import numpy as np
from scipy.stats import ttest_ind
from sklearn.linear_model import LinearRegression
from scipy.stats import wilcoxon

"""### Exploratory Data Analysis



"""

# change path if necessary
df = pd.read_csv("/content/drive/MyDrive/Colab Notebooks/student-mat copy.csv")

df.head()

df.shape

df.describe().T

df.info()

df.columns

for i in df.columns:
  print(i, df[i].unique())

"""### Creation of New Variables

Standardized G3 Column

"""

df["G3_Standardized"] = (df["G3"] - df["G3"].mean())/df["G3"].std()
df.head()

"""## further analysis of variables



"""

# colors for plots
color_rank = ["#faa7d4", "#ade38d", "#99dbe3", "#ffeaae", "#a598eb"]
color_yn = ["#99dbe3", "#ade38d"]

"""### Individual Situation

**sex**
"""

sex_t = pd.crosstab(index=df["sex"], columns="Count")
round(sex_t / sex_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='sex', y='G3', data=df, palette=color_yn, hue='sex', dodge=False, ax=axes[0]).set(title="boxplot of score in G3 by sex")
plt.pie(sex_t['Count'], labels=sex_t.index, colors=color_yn, autopct='%1.01f%%')

"""**age**"""

age_t = pd.crosstab(index=df["age"], columns="Count")
round(age_t / age_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
axes[0].scatter(df['age'],df['G3'], marker="o", s=10)
axes[0].ylabel = "G3"
axes[1].hist(df['age'], color="lightskyblue", edgecolor="black")
plt.title("histogram of age")

"""**absences**"""

absences_t = pd.crosstab(index=df["absences"], columns="Count")
absences_t = round(absences_t / absences_t.sum(), 3) * 100

plt.hist(df['absences'], color="lightskyblue", edgecolor="black")
plt.title("histogram of absences")

"""**reason**

(reason for choosing school)
"""

reason_t = pd.crosstab(index=df["reason"], columns="Count")
round(reason_t / reason_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='reason', y='G3', data=df, palette=("#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"), dodge=False, ax=axes[0]).set(title='G3 Score vs. Reason for Choosing School')
plt.bar(reason_t.index, reason_t['Count'], color=["#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"])
plt.title("Frequency Table of Reason for Choosing School")

"""**traveltime**"""

travel_t = pd.crosstab(index=df["traveltime"], columns="Count")
round(travel_t / travel_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='traveltime', y='G3', data=df, palette=("#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"), dodge=False, ax=axes[0]).set(title='G3 Score vs. Travel Time', )
axes[0].set_xticklabels(["<15 min", "15-30 min", "30 min-1hr", ">1 hr"])
plt.bar(travel_t.index, travel_t['Count'], color=["#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"])
plt.xticks([1,2,3,4],["<15 min", "15-30 min", "30 min-1hr", ">1 hr"])
plt.title("Frequency Table of Travel Time")

"""**studytime**"""

study_t = pd.crosstab(index=df["studytime"], columns="Count")
round(study_t / study_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='studytime', y='G3', data=df, palette=("#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"), dodge=False, ax=axes[0]).set(title='G3 Score vs. Study Time', )
axes[0].set_xticklabels(["<2 hr", "2-5 hrs", "5-10 hrs", ">10 hrs"])
plt.bar(study_t.index, study_t['Count'], color=["#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"])
plt.xticks([1,2,3,4],["<2 hr", "2-5 hrs", "5-10 hrs", ">10 hrs"])
plt.title("Frequency Table of Study Time")

"""**higher**"""

higher_t = pd.crosstab(index=df["higher"], columns="Count")
round(higher_t / higher_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='higher', y='G3', data=df, palette=palette_yn, hue='higher', dodge=False, ax=axes[0]).set(title='G3 Score vs. Continue to Higher Education')
plt.pie(higher_t['Count'], labels=higher_t.index, colors=color_yn, autopct='%1.01f%%')
plt.title('Wants to Continue to Higher Education')

"""**health**"""

health_t = pd.crosstab(index=df['health'], columns='Count')
health_t/ health_t.sum()*100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))
sns.boxplot(x='health', y='G3', data=df, palette=palette_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Health Status')
axes[0].set_xticklabels(["very bad", "bad", "ok", "good", "excellent"])
plt.bar(health_t.index, health_t["Count"], color=color_rank)
plt.xticks([1, 2, 3, 4, 5], ["very bad", "bad", "ok", "good", "excellent"])
plt.title('Health Status Ranking')

"""### Family Background

**address**
"""

add_t = pd.crosstab(index=df["address"], columns="Count")
round(add_t / add_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='address', y='G3', data=df, palette=color_yn, hue='address', dodge=False, ax=axes[0]).set(title="boxplot of score in G3 by address")
plt.pie(add_t['Count'], labels=add_t.index, colors=["#ade38d", "#99dbe3"], autopct='%1.01f%%')

"""**famsize**"""

famsize_t = pd.crosstab(index=df["famsize"], columns="Count")
round(famsize_t / famsize_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='famsize', y='G3', data=df, palette=color_yn, hue='famsize', dodge=False, ax=axes[0]).set(title="boxplot of score in G3 by family size")
plt.pie(famsize_t['Count'], labels=famsize_t.index, colors=color_yn, autopct='%1.01f%%')

"""**Pstatus**"""

pstat_t = pd.crosstab(index=df["Pstatus"], columns="Count")
round(pstat_t / pstat_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='Pstatus', y='G3', data=df, palette=color_yn, hue='Pstatus', dodge=False, ax=axes[0]).set(title="boxplot of score in G3 by Parent Status (Apart or Together)")
plt.pie(pstat_t['Count'], labels=pstat_t.index, colors=color_yn, autopct='%1.01f%%')

"""**Medu**"""

medu_t = pd.crosstab(index=df["Medu"], columns="Count")
round(medu_t / medu_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='Medu', y='G3', data=df, palette=color_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Mother Education Level', )
axes[0].set_xticklabels(["None", "Primary Ed.", "5th-9th", "Secondary Ed.", "Higher Ed."])
plt.bar(medu_t.index, medu_t['Count'], color=color_rank)
plt.xticks([0, 1, 2, 3, 4], ["None", "Primary Ed.", "5th-9th", "Secondary Ed.", "Higher Ed."])
plt.title("Frequency Table of Mother Education")

"""**Fedu**"""

fedu_t = pd.crosstab(index=df["Fedu"], columns="Count")
round(fedu_t / fedu_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='Fedu', y='G3', data=df, palette=color_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Father Education Level', )
axes[0].set_xticklabels(["None", "Primary Ed.", "5th-9th", "Secondary Ed.", "Higher Ed."])
plt.bar(fedu_t.index, fedu_t['Count'], color=color_rank)
plt.xticks([0, 1, 2, 3, 4], ["None", "Primary Ed.", "5th-9th", "Secondary Ed.", "Higher Ed."])
plt.title("Frequency Table of Father Education")

"""**Mjob**"""

mjob_t = pd.crosstab(index=df["Mjob"], columns="Count")
round(mjob_t / mjob_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='Mjob', y='G3', data=df, palette=color_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Mother Job', )
axes[0].set_xticklabels(["at home", "health", "other", "services", "teacher"])
plt.bar(mjob_t.index, mjob_t['Count'], color=color_rank)
plt.xticks([0, 1, 2, 3, 4], ["at home", "health", "other", "services", "teacher"])
plt.title("Frequency Table of Mother Job Type")

"""**Fjob**"""

fjob_t = pd.crosstab(index=df["Fjob"], columns="Count")
round(fjob_t / fjob_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='Fjob', y='G3', data=df, palette=color_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Father Job', )
axes[0].set_xticklabels(["at home", "health", "other", "services", "teacher"])
plt.bar(fjob_t.index, fjob_t['Count'], color=color_rank)
plt.xticks([0, 1, 2, 3, 4], ["at home", "health", "other", "services", "teacher"])
plt.title("Frequency Table of Father Job Type")

"""**guardian**"""

guardian_t = pd.crosstab(index=df["guardian"], columns="Count")
round(guardian_t / guardian_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='guardian', y='G3', data=df, palette=("#faa7d4", "#ade38d", "#99dbe3"), dodge=False, ax=axes[0]).set(title='G3 Score vs. Guardian', )
axes[0].set_xticklabels(["mother", "father", "other"])
plt.bar(guardian_t.index, guardian_t['Count'], color=["#ade38d", "#faa7d4", "#99dbe3"])
plt.xticks([0,1,2], ["father", "mother", "other"])
plt.title("Frequency Table of Guardian")

"""**famsup**"""

famsup_t = pd.crosstab(index=df['famsup'], columns='Count')
famsup_t = famsup_t/ famsup_t.sum()

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='famsup', y='G3', data=df, palette=palette_yn, hue='famsup', dodge=False, ax=axes[0]).set(title='G3 Score vs. Receive Family Educational Support')
plt.pie(famsup_t['Count'], labels=famsup_t.index, colors=color_yn, autopct='%1.01f%%')
plt.title('Receive Family Educational Support')

famsup_mean = df.groupby('famsup')['G3'].mean()
plt.bar(famsup_mean.index, famsup_mean, color=color_yn)
plt.axhline(y=df['G3'].mean(), color='red')
plt.title("Average G3 Score by Family Education Support")

"""**internet**"""

int_t = pd.crosstab(index=df["internet"], columns="Count")
round(int_t / int_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='internet', y='G3', data=df, palette=palette_yn, hue='internet', dodge=False, ax=axes[0]).set(title='G3 Score vs. Home Internet Access')
plt.pie(int_t['Count'], labels=int_t.index, colors=color_yn, autopct='%1.01f%%')
plt.title('Access to Internet from Home')

"""#### **famrel**


"""

famrel_t = pd.crosstab(index=df['famrel'], columns='Count')
famrel_t/ famrel_t.sum() * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))
sns.boxplot(x='famrel', y='G3', data=df, palette=palette_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Family Relationship Ranking')
axes[0].set_xticklabels(["very bad", "bad", "ok", "good", "excellent"])
plt.bar(famrel_t.index, famrel_t["Count"], color=color_rank)
plt.xticks([1, 2, 3, 4, 5], ["very bad", "bad", "ok", "good", "excellent"])
plt.title('Family Relationship Ranking')

famrel_mean = df.groupby('famrel')['G3'].mean()
plt.bar(famrel_mean.index, famrel_mean, color=color_rank)
plt.axhline(y=df['G3'].mean(), color='red')
plt.xticks([1, 2, 3, 4, 5], ["very bad", "bad", "ok", "good", "excellent"])
plt.title("Average G3 Score by Relationship with Family Rank")

"""### School Aspect

**school**
"""

school_t = pd.crosstab(index=df['school'], columns='Count')
school_t/ school_t.sum() * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='school', y='G3', data=df, palette=color_yn, hue='school', dodge=False, ax=axes[0]).set(title="boxplot of score in G3 by school")
plt.pie(school_t['Count'], labels=school_t.index, colors=color_yn, autopct='%1.01f%%')

"""**failures**"""

failure_t = pd.crosstab(index=df["failures"], columns="Count")
round(failure_t / failure_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='failures', y='G3', data=df, palette=("#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"), dodge=False, ax=axes[0]).set(title='G3 Score vs. Number of Failed Classes', )
axes[0].set_xticklabels(["<2 hr", "2-5 hrs", "5-10 hrs", ">10 hrs"])
plt.bar(failure_t.index, failure_t['Count'], color=["#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"])
plt.xticks([0, 1, 2, 3])
plt.title("Frequency Table of Failures")

"""**schoolsup**"""

schoolsup_t = pd.crosstab(index=df['schoolsup'], columns='Count')
schoolsup_t = schoolsup_t/ schoolsup_t.sum()

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='schoolsup', y='G3', data=df, palette=palette_yn, hue='schoolsup', dodge=False, ax=axes[0]).set(title='G3 Score vs. Receive School Educational Support')
plt.pie(schoolsup_t['Count'], labels=schoolsup_t.index, colors=color_yn, autopct='%1.01f%%')
plt.title('Receive School Educational Support')

schoolsup_mean = df.groupby('schoolsup')['G3'].mean()
plt.bar(schoolsup_mean.index, schoolsup_mean, color=color_yn)
plt.axhline(y=df['G3'].mean(), color='red')
plt.title("Average G3 Score by School Education Support")
plt.ylabel("G3 Score")

"""**paid**


"""

paid_t = pd.crosstab(index=df['paid'], columns='Count')
paid_t = paid_t/ paid_t.sum()

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='paid', y='G3', data=df, palette=palette_yn, hue='paid', dodge=False, ax=axes[0]).set(title='G3 Score vs. Paid for Extra Classes')
plt.pie(paid_t['Count'], labels=paid_t.index, colors=color_yn, autopct='%1.01f%%')
plt.title('Paid for Extra Classes')

paid_mean = df.groupby('paid')['G3'].mean()
plt.bar(paid_mean.index, paid_mean, color=color_yn)
plt.axhline(y=df['G3'].mean(), color='red')
plt.title("Average G3 Score by Paid for Extra Classes")
plt.ylabel("G3 Score")

"""**activities**

"""

activities_t = pd.crosstab(index=df['activities'], columns='Count')
activities_t = activities_t/ activities_t.sum()

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12, 6))
sns.boxplot(x='activities', y='G3', data=df, palette=palette_yn, hue='activities', dodge=False, ax=axes[0]).set(title='G3 Score vs. Involved in Activities')
plt.pie(activities_t['Count'], labels=activities_t.index, colors=color_yn, autopct='%1.01f%%')
plt.title('Involved in Activities')

activities_mean = df.groupby('activities')['G3'].mean()
plt.bar(activities_mean.index, activities_mean, color=color_yn)
plt.axhline(y=df['G3'].mean(), color='red')
plt.title("Average G3 Score by Involvement in Activities")
plt.ylabel("G3 Score")

"""**nursery**"""

nursery_t = pd.crosstab(index=df["nursery"], columns="Count")
round(nursery_t / nursery_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='nursery', y='G3', data=df, palette=palette_yn, hue='nursery', dodge=False, ax=axes[0]).set(title='G3 Score vs. Attended Nursery School')
plt.pie(nursery_t['Count'], labels=nursery_t.index, colors=color_yn, autopct='%1.01f%%')
plt.title('Attended Nursery School')

"""**G1**

"""

g1_t = pd.crosstab(index=df["G1"], columns="Count")
g1_t = round(g1_t / g1_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(y='G1', data=df, color="lightskyblue", ax=axes[0]).set(title="boxplot of score in G1")
axes[0].ylabel = "G1"
axes[0].axhline(y=df['G1'].mean(), color='green')

axes[1].hist(df['G1'], color="lightskyblue", edgecolor="black")
plt.title("histogram of score in G1")

"""**G2**"""

g2_t = pd.crosstab(index=df["G2"], columns="Count")
g2_t = round(g2_t / g2_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(y='G2', data=df, color="lightskyblue", ax=axes[0]).set(title="boxplot of score in G2")
axes[0].ylabel = "G2"
axes[0].axhline(y=df['G2'].mean(), color='green')

axes[1].hist(df['G2'], color="lightskyblue", edgecolor="black")
plt.title("histogram of score in G2")

"""**G3**"""

g3_t = pd.crosstab(index=df["G3"], columns="Count")
g3_t = round(g3_t / g3_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(y='G3', data=df, color="lightskyblue", ax=axes[0]).set(title="boxplot of score in G3")
axes[0].ylabel = "G3"
axes[0].axhline(y=df['G3'].mean(), color='green')

axes[1].hist(df['G3'], color="lightskyblue", edgecolor="black")
plt.title("histogram of score in G3")

"""**plot of G3 points and G1, G2, G3 average score lines**"""

plt.scatter(df.index, df['G3'], s=10, marker='o', label='G3')
plt.axhline(y=df['G3'].mean(), color='blue')
plt.axhline(y=df['G2'].mean(), color='red')
plt.axhline(y=df['G1'].mean(), color='green')
plt.ylabel = 'G3 Score'
plt.xlabel = 'index'

"""### Social Aspect

**romantic**
"""

rom_t = pd.crosstab(index=df["romantic"], columns="Count")
round(rom_t / rom_t.sum(), 3) * 100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='romantic', y='G3', data=df, palette=palette_yn, hue='romantic', dodge=False, ax=axes[0]).set(title='G3 Score vs. Students in Relationship')
plt.pie(rom_t['Count'], labels=rom_t.index, colors=color_yn, autopct='%1.01f%%')
plt.title('Students in Relationship')

"""**Walc**"""

walc_t = pd.crosstab(index=df['Walc'], columns='Count')
walc_t/ walc_t.sum()*100

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))
sns.boxplot(x='Walc', y='G3', data=df, palette=palette_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Alcohol Consumption During Weekends')
plt.bar(walc_t.index, walc_t["Count"], color=color_rank)
plt.title('Alcohol Consumption During Weekend')

"""#### **freetime**


"""

freetime_t = pd.crosstab(index=df['freetime'], columns='Count')
freetime_t = freetime_t/ freetime_t.sum()

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))
sns.boxplot(x='freetime', y='G3', data=df, palette=palette_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Free Time Ranking')
axes[0].set_xticklabels(["very low", "low", "somewhat", "high", "very high"])
plt.bar(freetime_t.index, freetime_t["Count"], color=color_rank)
plt.xticks([1, 2, 3, 4, 5], ["very low", "low", "somewhat", "high", "very high"])
plt.title('Free Time')

"""**group means compared to average G3 score**"""

freetime_mean = df.groupby('freetime')['G3'].mean()
plt.bar(freetime_mean.index, freetime_mean, color=color_rank)
plt.axhline(y=df['G3'].mean(), color='red')
plt.xticks([1, 2, 3, 4, 5], ["very low", "low", "somewhat", "high", "very high"])
plt.title("Average G3 Score by Free Time Rank")

"""**goout**"""

goout_t = pd.crosstab(index=df['goout'], columns='Count')
goout_t = goout_t/ goout_t.sum()

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))
sns.boxplot(x='goout', y='G3', data=df, palette=palette_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Going Out with Friends Ranking')
axes[0].set_xticklabels(["very low", "low", "somewhat", "high", "very high"])
plt.bar(goout_t.index, goout_t["Count"], color=color_rank)
plt.xticks([1, 2, 3, 4, 5], ["very low", "low", "somewhat", "high", "very high"])
plt.title('Go Out')

""" **Dalc**"""

dalc_t = pd.crosstab(index=df['Dalc'], columns='Count')
dalc_t = dalc_t/ dalc_t.sum()

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(20, 10))
sns.boxplot(x='Dalc', y='G3', data=df, palette=palette_rank, dodge=False, ax=axes[0]).set(title='G3 Score vs. Alcohol Consumption During Weekdays')
plt.bar(dalc_t.index, dalc_t["Count"], color=color_rank)
plt.title('Alcohol Consumption During Weekdays')

dalc_mean = df.groupby('Dalc')['G3'].mean()
plt.bar(dalc_mean.index, dalc_mean, color=color_rank)
plt.axhline(y=df['G3'].mean(), color='red')
plt.title("Average G3 Score by Alcohol Consumption During Weekdays")
plt.ylabel("G3 Score")

"""## Correlation
is there any correlation between variables?

### Individual Aspect

**sex**: Thanks to this model we can understand that there is a positive and significant relation between the final vote and the variable 'sex'. if a student is male the final vote increase of 0.95
"""

G3_by_sex = df.groupby('sex')['G3'].mean().reset_index()
G3_by_sex

t_stat, p_value = ttest_ind(df[df['sex'] == 'F']['G3'], df[df['sex'] == 'M']['G3'])
print(f"T-statistic: {t_stat}")
print(f"P-value: {p_value}")

df['sex'] = pd.Categorical(df['sex'])
sex_cat_matrix = pd.get_dummies(df['sex'], prefix='sex', drop_first=True)
df = pd.concat([df, sex_cat_matrix], axis=1)

model = LinearRegression()
X = df[sex_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""**reason**: there is not a significant relation between the final vote and the variable 'reason'.

"""

G3_by_reason= df.groupby('reason')['G3'].mean().reset_index()
G3_by_reason

df['traveltime'] = pd.Categorical(df['traveltime'])
travel_cat_matrix = pd.get_dummies(df['traveltime'], prefix='traveltime', drop_first=True)
df = pd.concat([df, travel_cat_matrix], axis=1)

X = df[travel_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""**studytime**: unlike the previous case, in this case the relationship between the variables is positive, in fact for every unit increase in studytime the final grade increases by 0.5340

"""

G3_by_study= df.groupby('studytime')['G3'].mean().reset_index()
G3_by_study

df['studytime'] = pd.Categorical(df['studytime'])
study_cat_matrix = pd.get_dummies(df['studytime'], prefix='studytime', drop_first=True)
df = pd.concat([df, study_cat_matrix], axis=1)

X = df[study_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""**higher**: in this case the relation between the wo variable is significant. if a student want to continue with the study, the final vote increase of 3.8"""

G3_by_higher= df.groupby('higher')['G3'].mean().reset_index()
G3_by_higher

df['higher'] = pd.Categorical(df['higher'])
higher_cat_matrix = pd.get_dummies(df['higher'], prefix='higher', drop_first=True)
df = pd.concat([df, higher_cat_matrix], axis=1)

X = df[higher_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""**absences**: variable not significant"""

X = df[['absences']]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""**age**: variable is significant. the relation between the age of the student and his final vote is negative. for each unit increment of age, the final vote decrese of -0.5801.

"""

X = df[['age']]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""correlation_matrix of age, traveltime, studytime, and absences

"""

df[['age', 'traveltime', 'studytime', 'absences']].corr()

"""further analysis: study time vs gender and studytime vs absences


"""

sns.boxplot(x='sex', y='studytime', data=df, palette=color_yn, hue='sex', dodge=False).set(title="boxplot of studytime by sex")
plt.show()

# F: red M: blue
plt.scatter(df['studytime'], df['absences'], c=df['sex'].map({'M': 'blue', 'F': 'red'}), marker='o', label=df['sex'])
plt.xlabel('Study Time')
plt.ylabel('Absences')
plt.title('Scatterplot of Study Time vs Absences')

"""### Family Background

EDUCATION LEVEL OF FAMILY

is there a relationship between Medu and Fedu?

there is a positive and consistent correlation between the variables
"""

medu_fedu_t = pd.crosstab(df['Medu'], df['Fedu'])
medu_fedu_t

prop_medu_fedu = (medu_fedu_t / medu_fedu_t.sum().sum() * 100).round(2)
prop_medu_fedu

df[['Medu', 'Fedu']].corr()

"""Family_Edu: total education level by adding Fedu and Medu variables to obtain a new variable of the sum of father and mother education

"""

df["family_edu"] = (pd.to_numeric(df['Fedu']) + pd.to_numeric(df['Medu']))
sns.boxplot(x='family_edu', y='G3', data=df, dodge=False).set(title='G3 Score vs. Family Education')

df.groupby('family_edu')['G3'].mean().reset_index()

"""the effect is positive, if Family edu increase G3 increase: increasing the level of education by 1, G3 score increase by 0.478 points"""

X = df[["family_edu"]]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""the effect of Family_edu alone is more significative then the single variables"""

X = df[["family_edu", "Fedu", "Medu"]]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""**Average Family Education Level**: new variable of average of mother and father education level"""

df["avg_edu"] = (pd.to_numeric(df['Fedu']) + pd.to_numeric(df['Medu'])) / 2
sns.boxplot(x='avg_edu', y='G3', data=df, dodge=False).set(title='G3 Score vs. Avg Family Education')

df.groupby('avg_edu')['G3'].mean().reset_index()

"""the effect is positive, if the avarage level of instruction increase G3 increase:
increasing the avarage level of education by 1, G3 score increase by 0.95 points
"""

X = df[["avg_edu"]]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""the effect of Family_edu alone is more significative then the single variables

"""

X = df[["avg_edu", 'Fedu', 'Medu']]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""FAMILY STATUS

Famsize and Address: bigger families live in urban areas: urban citiz. are 4.6 more then rural citiz. smaller families prefer urban areas too: the proportion is more balanced (3.1)
"""

size_add_t = pd.crosstab(df['address'], df['famsize'])
size_add_t

prop_size_add = (size_add_t / size_add_t.sum().sum() * 100).round(2)
prop_size_add

""" PSTATUS AND FAMSIZE:  the status divorced balance the distribution of
familysize, 10% of the observation live in divorced family (5.3% have size
less then 3, 5.1% higher then 3)
"""

size_pstat_t = pd.crosstab(df['Pstatus'], df['famsize'])
size_pstat_t

prop_pstat_add = (size_pstat_t / size_pstat_t.sum().sum() * 100).round(2)
prop_pstat_add

"""FAMREL AND PSTATUS: the parental status don't affect the quality of the relationship, the ratio between the modalities of famrel is the same for A & T"""

famrel_pstat_t = pd.crosstab(df['Pstatus'], df['famrel'])
famrel_pstat_t

famrel_pstat_add = (famrel_pstat_t / famrel_pstat_t.sum().sum() * 100).round(2)
famrel_pstat_add

"""FAMILY EMPLOYMENT STATUS:

Fjob and Mjob: # 43.5% of the parents have the same job, female teachers are double compared to male teachers, fathers at home are 1/3 respects to mothers at home, 11% of the families work in the service sector
"""

pjob_t = pd.crosstab(df['Mjob'], df['Fjob'])
pjob_t

prop_pjob= (pjob_t / pjob_t.sum().sum() * 100).round(2)
prop_pjob

df.groupby('Fjob')['G3'].mean().reset_index()

df.groupby('Mjob')['G3'].mean().reset_index()

sns.boxplot(x='Mjob', y='G3', data=df, dodge=False).set(title='G3 Score vs. Mother Job')

sns.boxplot(x='Fjob', y='G3', data=df, dodge=False).set(title='G3 Score vs. Father Job')

"""Family_occupation: new variable to account for combination of both mother and father jobs

"""

df["family_occupation"] = df["Mjob"] + '-' + df["Fjob"]
df['family_occupation'] = df.apply(lambda row: row['Mjob'] if row['Mjob'] == row['Fjob'] else row['family_occupation'], axis=1)

sns.boxplot(x='family_occupation', y='G3', data=df, dodge=False).set(title='G3 Score vs. family occupation')

"""the effect of the family occupation now is stronger

To isolate the effect of the family work,  plot only the family which have the parents with the same job
"""

df['family_occupation'] = pd.Categorical(df['family_occupation'])
famocc_cat_matrix = pd.get_dummies(df['family_occupation'], prefix='family_occupation', drop_first=True)
df = pd.concat([df, famocc_cat_matrix], axis=1)

X = df[famocc_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""FAMSUP AND FAMREL"""

famsup_rel_t = pd.crosstab(df['famsup'], df['famrel'])
famsup_rel_t

prop_famsup_rel= (famsup_rel_t / famsup_rel_t.sum().sum() * 100).round(2)
prop_famsup_rel

"""FAMSUP AND FAMSIZE"""

famsup_size_t = pd.crosstab(df['famsup'], df['famsize'])
famsup_size_t

prop_famsup_size= (famsup_size_t / famsup_size_t.sum().sum() * 100).round(2)
prop_famsup_size

"""**FAMILY WELLBEING**

The amount of the indicator is based on the evaluation of the quality of family relationship: 1-5

if the student doesn't recieve any support from the family: Family_Wellbeing +2

if not: Family_Wellbeing + 1

if extra lesson are payed: Family_wellbeing + 2

if not: Family_Wellbeing + 1
"""

# convert paid variable and famsup variable from "yes" and "no" to 1 and 0, respectively
df['paid'] = df['paid'].apply(lambda x: 1 if x == 'yes' else 0)
df['famsup'] = df['famsup'].apply(lambda x: 1 if x == 'yes' else 0)

df["family_wellbeing"] =  (pd.to_numeric(df['paid']) + pd.to_numeric(df['famsup']) + pd.to_numeric(df['famrel']))

X = df[['family_wellbeing']]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""INTERNET AND FAMILY EDUCATION: increasing the level of education, in average the possibility to have an home Wi-Fi increase

"""

df.groupby('internet')['family_edu'].mean().reset_index()

sns.boxplot(x='internet', y='family_edu', data=df, dodge=False).set(title='Total Family education vs. Internet Access')

int_wellbeing_t = pd.crosstab(df['internet'], df['family_wellbeing'])
int_wellbeing_t

prop_int_wellbeing= (int_wellbeing_t / int_wellbeing_t.sum().sum() * 100).round(2)
prop_int_wellbeing

"""family_wellbeing variable, with wifi added

The amount of the indicator is based on the evaluation of the quality of family relationship: 1-5

if the student doesn't recieve any support from the family: Family_Wellbeing +2

if not: Family_Wellbeing + 1

if extra lesson are payed: Family_wellbeing + 2

if not: Family_Wellbeing + 1

if the student have home WiFi: Family_Wellbeing + 2

if not: Family_Wellbeing + 1

"""

df['internet'] = df['internet'].apply(lambda x: 1 if x == 'yes' else 0)
df["family_wellbeing"] =  (pd.to_numeric(df['paid']) + pd.to_numeric(df['famsup']) + pd.to_numeric(df['famrel']) + pd.to_numeric(df['internet']))

"""GUARDIAN AND INTERNET"""

guard_int_t = pd.crosstab(df['internet'], df['guardian'])
guard_int_t

"""### School Aspect"""

df['schoolsup'] = df['schoolsup'].apply(lambda x: 1 if x == 'yes' else 0)
df['activities'] = df['activities'].apply(lambda x: 1 if x == 'yes' else 0)
df['paid'] = df['paid'].apply(lambda x: 1 if x == 'yes' else 0)

"""SCHOOLSUP AND PAID"""

schoolsup_paid_t = pd.crosstab(df['paid'], df['schoolsup'])
schoolsup_paid_t

"""PAID AND ACTIVITIES"""

activities_paid_t = pd.crosstab(df['paid'], df['activities'])
activities_paid_t

"""**extra_activities**: new variable to account for school support, paying for extra classes, and participating in activities

"""

df['extra_activities'] = (pd.to_numeric(df['paid']) + pd.to_numeric(df['schoolsup']) + pd.to_numeric(df['activities']))

sns.boxplot(x='extra_activities', y='G3', data=df, dodge=False).set(title='G3 Score vs. extra activities')

X = df[['extra_activities']]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""**average_score**: weighted average of students scores on three tests (G1,G2,G3). the weighting of the score is done using specified weight of 0.15 for G1, 0.25 for G2, 0.6 for G3, because we gave more importance to the final grade."""

weight = {"G3":0.6, "G2": 0.25, "G1": 0.15}
df['average_score'] = sum(df[col] * weight[col] for col in weight)

"""**student_commitment**:

- studytime (numeric variable that has 3 values (1 if the weekly study hours are <2, 2 if they are from 2 to 5, 3 if they are from 5 to 10 hours, and 4 if >10).

- activities: numerical with 2 values (1 or -1)

-higher: numerical with 2 values (1 or -1)

-absence: numerical variable from 0 to 93, cut the variable in 5 breaks and assign 5 to who made many absences, 1 who made few of them. then reverse the orders of the value and create the variable_sintetica as breaks+1 - breaks

- student_commitment: new variable, summed studytime, activities, higher, and absences and multipled studytime by 2 because we gave more importance to the time spent studying and doing so we can see that students who have the highest
points on student_commitment have at the same time the higher average grade. (the point go from 4 to 15)

"""

df['activities'] = df['activities'].apply(lambda x: 1 if x == 'yes' else -1)
df['activities_num'] = pd.to_numeric(df['activities']) - 1

df['higher'] = df['higher'].apply(lambda x: 1 if x == 'yes' else -1)
df['higher_num'] = pd.to_numeric(df['higher']) - 1

intervals = pd.cut(df['absences'], bins=5, labels=False)
df['intervals'] = intervals

synthetic_variables = 6-intervals

df['student_commitment'] = (df['studytime'] * 2) + df['activities_num'] + synthetic_variables + df['higher_num']

"""### Social Aspect

FREETIME AND GOOUT:

is there a relationship between amount of freetime a student has and how often they go out with friends?
"""

freetime_goout_t = pd.crosstab(df['freetime'], df['goout'])
freetime_goout_t

prop_total_freetime = (freetime_goout_t / freetime_goout_t.sum().sum() * 100).round(2)
prop_total_freetime

"""linear regression model: there is no statistically significant relationship between G3 and freetime rank"""

df['freetime'] = pd.Categorical(df['freetime'])
freetime_cat_matrix = pd.get_dummies(df['freetime'], prefix='freetime', drop_first=True)
df = pd.concat([df, freetime_cat_matrix], axis=1)

X = df[freetime_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""there is a statistically significant relationship between G3 and goout rank:
goout rank 2 and 3 are statistically significant goout rank 1 (don't go out with friends often) does not have an effect on G3 therefore, it can be said that students who ranked goout as a 2 will score higher than students who ranked goout as a 3
"""

df['goout'] = pd.Categorical(df['goout'])
goout_cat_matrix = pd.get_dummies(df['goout'], prefix='goout', drop_first=True)
df = pd.concat([df, goout_cat_matrix], axis=1)

X = df[goout_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""FREETIME AND ROMANTIC

is there a relationship between being in a romantic relationship and the amount of freetime a student has?
"""

# convert romantic variable from "yes" and "no" to 1 and 0, respectively
df['romantic'] = df['romantic'].apply(lambda x: 1 if x == 'yes' else 0)

freetime_rom_t = pd.crosstab(df['romantic'],df['freetime'])
freetime_rom_t

"""there is a higher frequency of students that are not in a romantic relationship (blue)"""

plt.hist([1, 2, 3, 4, 5], weights=[freetime_rom_t.loc[0, i] for i in range(1, 6)], bins=[0, 1, 2, 3, 4, 5, 6], color='lightblue', label='not in romantic relationship')
plt.hist([1, 2, 3, 4, 5], weights=[freetime_rom_t.loc[1, i] for i in range(1, 6)], bins=[0, 1, 2, 3, 4, 5, 6], color='lightpink', label='in romantic relationship')
plt.title("Romantic Relationship and Freetime")
plt.xlabel("Freetime Ranking")
plt.ylabel("Frequency")
plt.legend(loc='upper left')

"""however, being in a romantic relationship has a stat. significant
effect on G3 - if in a romantic relationship, G3 is 1.2607 points less than if not in romantic relationship
"""

X = df[['romantic']]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""ROMANTIC AND GOING OUT

is there a relationship between being in a romantic relationship and how often a student goes out with friends?
"""

goout_rom_t = pd.crosstab(df['romantic'],df['goout'])
goout_rom_t

"""make separate tables for romantic relationship or not, and go out ranking"""

goout_rom_no = goout_rom_t.iloc[0]
goout_rom_yes = goout_rom_t.iloc[1]

"""there is a higher frequency of students that are not in a romantic relationship (blue)"""

plt.hist([1, 2, 3, 4, 5], weights=[goout_rom_t.loc[0, i] for i in range(1, 6)], bins=[0, 1, 2, 3, 4, 5, 6], color='lightblue', label='not in romantic relationship')
plt.hist([1, 2, 3, 4, 5], weights=[goout_rom_t.loc[1, i] for i in range(1, 6)], bins=[0, 1, 2, 3, 4, 5, 6], color='lightpink', label='in romantic relationship')
plt.title("Romantic Relationship and Freetime")
plt.xlabel("Goout Ranking")
plt.ylabel("Frequency")
plt.legend(loc='upper left')

"""use wilcoxon ranked test to compare the if the goout ranking is affected by relationship status, p value > 0.05: goout ranking does not depend on if in relationship or not"""

statistic, p_value = wilcoxon(goout_rom_no, goout_rom_yes)
print("Wilcoxon Statistic:", statistic)
print("P-value:", p_value)

"""DALC AND WALC

is there a relationship between drinking alcohol during the week and during the weekend?

most students do not drink alcohol during the weekdays, while more students drink alcohol during the weekend
"""

alcohol_t2 = pd.crosstab(df['Dalc'],df['Walc'])
alcohol_t2

"""Dalc ranking (individually) has no effect on G3, only when Dalc = 2"""

df['Dalc'] = pd.Categorical(df['Dalc'])
Dalc_cat_matrix = pd.get_dummies(df['Dalc'], prefix='goout', drop_first=True)
df = pd.concat([df, Dalc_cat_matrix], axis=1)

X = df[Dalc_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""Walc ranking (individually) also has no effect on G3"""

df['Walc'] = pd.Categorical(df['Walc'])
Walc_cat_matrix = pd.get_dummies(df['Walc'], prefix='goout', drop_first=True)
df = pd.concat([df, Walc_cat_matrix], axis=1)

X = df[Walc_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""AVG_ALC: new variable of average alcohol consumption between weekend and weekday"""

df["avg_alc"] = (pd.to_numeric(df['Walc']) + pd.to_numeric(df['Dalc'])) / 2

"""there are "half values" (1.5, 2.5, etc): to avoid a "half ranking", categorize the half values to the higher of the two rankings"""

avg_alc_t = pd.crosstab(df["avg_alc"], columns="Count")
avg_alc_t
df['avg_alc'].replace({1.5: 2, 2.5: 3, 3.5: 4, 4.5: 5}, inplace=True)

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='avg_alc', y='G3', data=df, palette=("#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"), dodge=False, ax=axes[0]).set(title='G3 Score vs. Avg Weekly Alcohol Consumption')
plt.bar(avg_alc_t.index, avg_alc_t['Count'], color=["#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"])
plt.title("Frequency Table of Avg Alcohol Consumption")

"""avg alcohol consumption throughout the week also has no effect on G3"""

df['avg_alc'] = pd.Categorical(df['avg_alc'])
avgalc_cat_matrix = pd.get_dummies(df['avg_alc'], prefix='avg_alc', drop_first=True)
df = pd.concat([df, avgalc_cat_matrix], axis=1)

X = df[avgalc_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""HEALTH AND ALCOHOL

does health have any relationship with alcohol?
"""

health_avg_alc = pd.crosstab(df["avg_alc"], df["health"])
health_avg_alc

"""health ranking of 3 and 4 have an effect on G3 score"""

df['health'] = pd.Categorical(df['health'])
health_alc_cat_matrix = pd.get_dummies(df['health'], prefix='health', drop_first=True)
df = pd.concat([df, health_alc_cat_matrix], axis=1)

X = df[health_alc_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""combine health and avg_alc: health_avgalc : average of health ranking and alcohol consumption

"""

df["health_avgalc"] = (pd.to_numeric(df['avg_alc']) + pd.to_numeric(df['health'])) / 2

"""there are "half values" (1.5, 2.5, etc): to avoid a "half ranking",
categorize the half values to the higher of the two rankings
"""

h_avgalc_t = pd.crosstab(df["health_avgalc"], columns="Count")
h_avgalc_t
df['health_avgalc'].replace({1.5: 2, 2.5: 3, 3.5: 4, 4.5: 5}, inplace=True)

fig, axes = plt.subplots(nrows=1, ncols=2, figsize=(12,6))
sns.boxplot(x='health_avgalc', y='G3', data=df, palette=("#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"), dodge=False, ax=axes[0]).set(title='G3 Score vs. Avg Weekly Alcohol Consumption and Health')
plt.bar(h_avgalc_t.index, h_avgalc_t['Count'], color=["#faa7d4", "#ade38d", "#99dbe3", "#ffeaae"])
plt.title("Frequency Table of Avg Alcohol Consumption and Health")

"""average health ranking and alcohol consumption of 4 has a significant effect on G3"""

df['health_avgalc'] = pd.Categorical(df['health_avgalc'])
health_avgalc_cat_matrix = pd.get_dummies(df['health_avgalc'], prefix='health_avgalc', drop_first=True)
df = pd.concat([df, health_avgalc_cat_matrix], axis=1)

X = df[health_avgalc_cat_matrix.columns]
y = df['G3']
model.fit(X, y)
print("Coefficients:", model.coef_)
print("Intercept:", model.intercept_)

"""### Addition analysis of correlation between variables

G1 and G2
"""

df[["G1", "G2"]].corr()

"""G2 and G3"""

df[["G3", "G2"]].corr()

"""G1 and G3"""

df[["G1", "G3"]].corr()

"""G3 and absences"""

df[["G3", "absences"]].corr()

"""combined correlation matrix:"""

df[["G1", "G2", "G3", "absences", "failures"]].corr()

"""heatmap of correlations"""

sns.heatmap(df[["G1", "G2", "G3", "absences", "failures"]].corr());